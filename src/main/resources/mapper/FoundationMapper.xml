<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.transample.demo.mapper.FoundationMapper">
  <resultMap id="BaseResultMap" type="com.transample.demo.domain.Foundation">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="english_name" jdbcType="VARCHAR" property="englishName" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="rigister_money" jdbcType="INTEGER" property="rigisterMoney" />
    <result column="legal_person" jdbcType="VARCHAR" property="legalPerson" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="administration" jdbcType="VARCHAR" property="administration" />
    <result column="password" jdbcType="VARCHAR" property="password" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.transample.demo.domain.FoundationWithBLOBs">
    <result column="introduction" jdbcType="LONGVARCHAR" property="introduction" />
    <result column="create_time" jdbcType="LONGVARCHAR" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `name`, english_name, address, rigister_money, legal_person, `type`, administration, 
    `password`
  </sql>
  <sql id="Blob_Column_List">
    introduction, create_time
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.transample.demo.domain.FoundationExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from foundation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.transample.demo.domain.FoundationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from foundation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from foundation
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from foundation
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.transample.demo.domain.FoundationExample">
    delete from foundation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.transample.demo.domain.FoundationWithBLOBs" useGeneratedKeys="true">
    insert into foundation (`name`, english_name, address, 
      rigister_money, legal_person, `type`, 
      administration, `password`, introduction, 
      create_time)
    values (#{name,jdbcType=VARCHAR}, #{englishName,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{rigisterMoney,jdbcType=INTEGER}, #{legalPerson,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{administration,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{introduction,jdbcType=LONGVARCHAR}, 
      #{createTime,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.transample.demo.domain.FoundationWithBLOBs" useGeneratedKeys="true">
    insert into foundation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="englishName != null">
        english_name,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="rigisterMoney != null">
        rigister_money,
      </if>
      <if test="legalPerson != null">
        legal_person,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="administration != null">
        administration,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="introduction != null">
        introduction,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="englishName != null">
        #{englishName,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="rigisterMoney != null">
        #{rigisterMoney,jdbcType=INTEGER},
      </if>
      <if test="legalPerson != null">
        #{legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="administration != null">
        #{administration,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null">
        #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.transample.demo.domain.FoundationExample" resultType="java.lang.Long">
    select count(*) from foundation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update foundation
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.englishName != null">
        english_name = #{record.englishName,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.rigisterMoney != null">
        rigister_money = #{record.rigisterMoney,jdbcType=INTEGER},
      </if>
      <if test="record.legalPerson != null">
        legal_person = #{record.legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.administration != null">
        administration = #{record.administration,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.introduction != null">
        introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update foundation
    set id = #{record.id,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      english_name = #{record.englishName,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      rigister_money = #{record.rigisterMoney,jdbcType=INTEGER},
      legal_person = #{record.legalPerson,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      administration = #{record.administration,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR},
      introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      create_time = #{record.createTime,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update foundation
    set id = #{record.id,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      english_name = #{record.englishName,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      rigister_money = #{record.rigisterMoney,jdbcType=INTEGER},
      legal_person = #{record.legalPerson,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      administration = #{record.administration,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.transample.demo.domain.FoundationWithBLOBs">
    update foundation
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="englishName != null">
        english_name = #{englishName,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="rigisterMoney != null">
        rigister_money = #{rigisterMoney,jdbcType=INTEGER},
      </if>
      <if test="legalPerson != null">
        legal_person = #{legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=VARCHAR},
      </if>
      <if test="administration != null">
        administration = #{administration,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.transample.demo.domain.FoundationWithBLOBs">
    update foundation
    set `name` = #{name,jdbcType=VARCHAR},
      english_name = #{englishName,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      rigister_money = #{rigisterMoney,jdbcType=INTEGER},
      legal_person = #{legalPerson,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      administration = #{administration,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      introduction = #{introduction,jdbcType=LONGVARCHAR},
      create_time = #{createTime,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.transample.demo.domain.Foundation">
    update foundation
    set `name` = #{name,jdbcType=VARCHAR},
      english_name = #{englishName,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      rigister_money = #{rigisterMoney,jdbcType=INTEGER},
      legal_person = #{legalPerson,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      administration = #{administration,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>